//{ Driver Code Starts
import java.util.*;

class GFG {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tc = scanner.nextInt(); // Number of test cases
        while (tc-- > 0) {
            int n = scanner.nextInt(); // Number of rows
            int m = scanner.nextInt(); // Number of columns
            char[][] grid = new char[n][m];

            // Read the grid input
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    grid[i][j] = scanner.next().charAt(0);
                }
            }
            Solution obj = new Solution();
            int ans = obj.numIslands(grid);
            System.out.println(ans);
        }
        scanner.close();
    }
}

// } Driver Code Ends


class Solution {
    private static final int[] rowDir = {-1, -1, -1, 0, 0, 1, 1, 1};
    private static final int[] colDir = {-1, 0, 1, -1, 1, -1, 0, 1};

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;

        int numIslands = 0;
        int n = grid.length; // number of rows
        int m = grid[0].length; // number of columns

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '1') {
                    numIslands++;
                    bfs(grid, i, j, n, m); // Mark all connected land as visited
                }
            }
        }

        return numIslands;
    }

    private void bfs(char[][] grid, int i, int j, int n, int m) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{i, j});
        grid[i][j] = '0'; // Mark the starting cell as visited

        while (!queue.isEmpty()) {
            int[] pos = queue.poll();
            int x = pos[0], y = pos[1];

            // Explore all 8 directions
            for (int k = 0; k < 8; k++) {
                int newX = x + rowDir[k];
                int newY = y + colDir[k];

                if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newX][newY] == '1') {
                    queue.add(new int[]{newX, newY});
                    grid[newX][newY] = '0'; // Mark as visited
                }
            }
        }
    }

}
